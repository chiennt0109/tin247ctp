# path: problems/views.py
from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse
from django.db.models import Count, Q
from django.core.paginator import Paginator
import random

from .models import Problem, Tag
from submissions.models import Submission

# AI helpers
from .ai_helper import (
    gen_ai_hint,
    analyze_failed_test,
    recommend_next,
    build_learning_path,
)

# AI hint LLM
from .ai.ai_hint import get_hint


# ===========================
# üåà DANH S√ÅCH B√ÄI TO√ÅN + PAGINATION
# ===========================
def problem_list(request):
    tag_slug = request.GET.get("tag", "").strip()
    difficulty = request.GET.get("difficulty", "").strip()

    qs = Problem.objects.all().order_by("code")

    if tag_slug:
        qs = qs.filter(tags__slug=tag_slug)
    if difficulty:
        qs = qs.filter(difficulty=difficulty)

    qs = qs.annotate(
        submit_count_live=Count("submission", distinct=True),
        ac_count_live=Count(
            "submission",
            filter=Q(submission__verdict="Accepted"),
            distinct=True,
        ),
    )

    paginator = Paginator(qs, 12)  # ‚úÖ m·ªói trang 12 b√†i
    page = request.GET.get("page")
    problems = paginator.get_page(page)

    return render(
        request,
        "problems/list.html",
        {
            "problems": problems,
            "tags": Tag.objects.all(),
            "difficulty_levels": ["Easy", "Medium", "Hard"],
            "selected_tag": tag_slug,
            "selected_difficulty": difficulty,
        },
    )


# ===========================
# üìò CHI TI·∫æT B√ÄI TO√ÅN
# ===========================
def problem_detail(request, pk):
    problem = get_object_or_404(Problem, pk=pk)
    submit_count = Submission.objects.filter(problem=problem).count()
    ac_count = Submission.objects.filter(problem=problem, verdict="Accepted").count()

    return render(
        request,
        "problems/detail.html",
        {
            "problem": problem,
            "submit_count": submit_count,
            "ac_count": ac_count,
        },
    )


# ===========================
# ü§ñ AI HINT: b·∫£n random c≈©
# ===========================
AI_HINTS = [
    "Th·ª≠ ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán d·ª´ng c·ªßa v√≤ng l·∫∑p.",
    "H√£y xem x√©t c√°c tr∆∞·ªùng h·ª£p bi√™n.",
    "D√πng prefix sum ho·∫∑c DP xem sao?",
    "C·∫©n th·∫≠n tr√†n s·ªë ‚Äî d√πng long long.",
    "Ki·ªÉm tra l·∫°i input format.",
    "Reset bi·∫øn gi·ªØa c√°c test case.",
]

def ai_hint_random(request, pk):
    return JsonResponse({"result": random.choice(AI_HINTS)})


# ===========================
# ü§ñ AI hint LLM ch√≠nh
# ===========================
def ai_hint_real(request, pk):
    problem = get_object_or_404(Problem, pk=pk)
    hint = get_hint(problem.title, problem.difficulty)
    return JsonResponse({"result": hint})


# ===========================
# üß™ AI debug test fail
# ===========================
def ai_debug(request, pk):
    input_data = request.GET.get("input", "")
    expected = request.GET.get("expected", "")
    got = request.GET.get("got", "")
    res = analyze_failed_test(input_data, expected, got)
    return JsonResponse({"result": res})


# ===========================
# üéØ G·ª£i √Ω b√†i k·∫ø
# ===========================
def ai_recommend(request, pk):
    p = get_object_or_404(Problem, pk=pk)
    res = recommend_next(p.difficulty)
    return JsonResponse({"result": res})


# ===========================
# üìö AI l·ªô tr√¨nh h·ªçc
# ===========================
def ai_learning_path(request):
    user = request.user
    if not user.is_authenticated:
        return JsonResponse({"result": "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªô tr√¨nh."}, status=403)

    subs = Submission.objects.filter(user=user)
    solved = subs.filter(verdict="Accepted").count()

    if solved == 0:
        return JsonResponse({
            "summary": "B·∫°n ch∆∞a gi·∫£i b√†i n√†o.",
            "suggest": [
                "B·∫Øt ƒë·∫ßu t·ª´ Roadmap Giai ƒëo·∫°n 1",
                "L√†m 3 b√†i Easy ƒë·∫ßu ti√™n"
            ]
        })

    probs = [s.problem for s in subs.filter(verdict="Accepted")]
    levels = {"Easy": 1, "Medium": 2, "Hard": 3}
    avg_score = sum(levels[p.difficulty] for p in probs) / len(probs)
    diff = "Easy" if avg_score < 1.5 else "Medium" if avg_score < 2.5 else "Hard"

    return JsonResponse(build_learning_path(user, solved, diff))

# ========== BACKWARD COMPAT fix ==========
# Gi√∫p URL c≈© ai_hint/ v·∫´n ho·∫°t ƒë·ªông
def ai_hint(request, pk):
    return ai_hint_real(request, pk)

