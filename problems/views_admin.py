# =====================================================
# üìÅ File: problems/views_admin.py
# üß© M·ª•c ƒë√≠ch:
#   - Cung c·∫•p API AI n·ªôi b·ªô cho trang Admin:
#       + T·ª± ƒë·ªông sinh m√£ b√†i (code)
#       + G·ª£i √Ω tag (Graph, DP, Greedy, ‚Ä¶)
#       + ƒê√°nh gi√° ƒë·ªô kh√≥ (Easy / Medium / Hard)
#   - Gi·ªØ l·∫°i alias `ai_suggest_tags()` cho t∆∞∆°ng th√≠ch
# =====================================================

from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.contrib.admin.views.decorators import staff_member_required
import json, re

@csrf_exempt
@staff_member_required
def ai_analyze_problem(request):
    """
    üß† Ph√¢n t√≠ch ƒë·ªÅ b√†i v√† sinh g·ª£i √Ω:
    - Input (JSON):
        {
            "title": "T√™n b√†i to√°n",
            "statement": "N·ªôi dung ƒë·ªÅ b√†i..."
        }
    - Output (JSON):
        {
            "code": "T·ª± ƒë·ªông sinh m√£ b√†i",
            "difficulty": "Easy/Medium/Hard",
            "tags": ["Graph", "DP", ...]
        }
    """
    if request.method != "POST":
        return JsonResponse({"error": "POST only"}, status=405)

    try:
        body = json.loads(request.body.decode("utf-8"))
        text = (body.get("statement") or "").lower()
        title = body.get("title") or "Untitled"
    except Exception:
        return JsonResponse({"error": "Invalid JSON"}, status=400)

    # === 1Ô∏è‚É£ G·ª£i √Ω tag (rule-based) ===
    tags = []
    if any(k in text for k in ["graph", "ƒë·ªì th·ªã", "c·∫°nh", "ƒë·ªânh"]): tags.append("Graph")
    if any(k in text for k in ["dijkstra", "bfs", "dfs", "ƒë∆∞·ªùng ƒëi"]): tags.append("Shortest Path")
    if any(k in text for k in ["dp", "quy ho·∫°ch ƒë·ªông", "dynamic programming"]): tags.append("DP")
    if any(k in text for k in ["string","prefixsum", "x√¢u", "chu·ªói"]): tags.append("String")
    if any(k in text for k in ["greedy", "tham lam"]): tags.append("Greedy")
    if any(k in text for k in ["sort", "s·∫Øp x·∫øp"]): tags.append("Sorting")
    if any(k in text for k in ["mod", "gcd", "lcm", "prime", "s·ªë nguy√™n t·ªë"]): tags.append("Math")
    if not tags:
        tags = ["General"]

    # === 2Ô∏è‚É£ Sinh m√£ b√†i (code) ===
    prefix = f"{len(title)}{len(tags)}"
    keyword = re.sub(r'[^A-Za-z0-9]+', '', title.split()[0].upper())[:3]
    code = f"{prefix}-{keyword}"

    # === 3Ô∏è‚É£ ƒê√°nh gi√° ƒë·ªô kh√≥ ===
    difficulty = "Easy"
    if any(k in text for k in ["qhd", "dp", "dijkstra", "segment", "t·ªï h·ª£p", "backtrack"]):
        difficulty = "Hard"
    elif any(k in text for k in ["greedy", "s·∫Øp x·∫øp", "sort", "trung b√¨nh"]):
        difficulty = "Medium"
    if len(text) > 1500 or "r√†ng bu·ªôc" in text:
        difficulty = "Hard"

    return JsonResponse({
        "code": code,
        "difficulty": difficulty,
        "tags": tags
    })


# =====================================================
# üß© Alias c≈© cho t∆∞∆°ng th√≠ch (gi·ªØ route /ai_suggest_tags/)
# =====================================================
@csrf_exempt
@staff_member_required
def ai_suggest_tags(request):
    """
    API c≈©: /ai_suggest_tags/
    ‚Üí Gi·ªØ ƒë·ªÉ tr√°nh l·ªói khi build.
    G·ªçi ng·∫ßm sang h√†m `ai_analyze_problem()`.
    """
    if request.method == "POST":
        return ai_analyze_problem(request)
    return JsonResponse({"error": "POST only"}, status=405)
