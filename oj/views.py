# path: app/views.py
from django.shortcuts import render
from judge.run_code import run_submission


# ==========================================================
# üß© Trang n·ªôp b√†i
# ==========================================================
def submit_code(request):
    result = None
    if request.method == "POST":
        lang = request.POST.get("language")
        source = request.POST.get("source")
        result = run_submission(lang, source)
    return render(request, "submit.html", {"result": result})


# ==========================================================
# üåà Trang ch·ªß ‚Äì L·ªô tr√¨nh h·ªçc l·∫≠p tr√¨nh 14 giai ƒëo·∫°n
# ==========================================================
def home(request):
    stages = [
        {"stage": "L√†m quen v·ªõi l·∫≠p tr√¨nh",
         "desc": "Hi·ªÉu ch∆∞∆°ng tr√¨nh l√† g√¨, vi·∫øt l·ªánh ƒë·∫ßu ti√™n, ch·∫°y v√† xem k·∫øt qu·∫£.",
         "examples": ['In "Hello World"', "Nh·∫≠p & xu·∫•t d·ªØ li·ªáu"],
         "tag": "beginner", "color": "sky"},
        {"stage": "C·∫•u tr√∫c ƒëi·ªÅu khi·ªÉn & t∆∞ duy logic",
         "desc": "H·ªçc If‚ÄìElse, For, While, t∆∞ duy logic v√† thu·∫≠t to√°n c∆° b·∫£n.",
         "examples": ["If‚ÄìElse, For, While", "B√†i t·∫≠p t√≠nh to√°n, m√¥ ph·ªèng"],
         "tag": "logic", "color": "indigo"},
        {"stage": "C·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n",
         "desc": "L√†m quen m·∫£ng, chu·ªói, danh s√°ch, stack, queue, set, map.",
         "examples": ["S·∫Øp x·∫øp v√† t√¨m ki·∫øm", "·ª®ng d·ª•ng stack v√† queue"],
         "tag": "datastruct", "color": "amber"},
        {"stage": "Hai con tr·ªè & c·ª≠a s·ªï tr∆∞·ª£t",
         "desc": "Gi·∫£i b√†i to√°n t·ªëi ∆∞u b·∫±ng hai con tr·ªè v√† k·ªπ thu·∫≠t c·ª≠a s·ªï tr∆∞·ª£t.",
         "examples": ["T√¨m c·∫∑p c√≥ t·ªïng b·∫±ng X", "ƒê·∫øm ƒëo·∫°n con h·ª£p l·ªá"],
         "tag": "twopointers", "color": "teal"},
        {"stage": "ƒê·ªá quy & chia ƒë·ªÉ tr·ªã",
         "desc": "T∆∞ duy chia nh·ªè v·∫•n ƒë·ªÅ v√† gi·∫£i quy·∫øt b·∫±ng ƒë·ªá quy.",
         "examples": ["ƒê·ªá quy c∆° b·∫£n", "Merge Sort, Quick Sort"],
         "tag": "recursion", "color": "pink"},
        {"stage": "Quy ho·∫°ch ƒë·ªông (DP)",
         "desc": "T·ªëi ∆∞u h√≥a v·ªõi tr·∫°ng th√°i v√† b√†i to√°n con.",
         "examples": ["D√£y con tƒÉng d√†i nh·∫•t", "Balo, chia m·∫£nh"],
         "tag": "dp", "color": "purple"},
        {"stage": "Sinh & quay lui (Backtracking)",
         "desc": "Sinh nghi·ªám v√† t√¨m nghi·ªám th·ªèa ƒëi·ªÅu ki·ªán.",
         "examples": ["Li·ªát k√™ t·ªï h·ª£p, ho√°n v·ªã", "Gi·∫£i Sudoku"],
         "tag": "backtrack", "color": "rose"},
        {"stage": "ƒê·ªì th·ªã c∆° b·∫£n",
         "desc": "T√¨m hi·ªÉu ƒë·ªânh, c·∫°nh v√† duy·ªát ƒë·ªì th·ªã.",
         "examples": ["DFS, BFS", "ƒê·∫øm th√†nh ph·∫ßn li√™n th√¥ng"],
         "tag": "graph", "color": "emerald"},
        {"stage": "ƒê·ªì th·ªã n√¢ng cao",
         "desc": "√Åp d·ª•ng thu·∫≠t to√°n ƒë·ªì th·ªã ph·ª©c t·∫°p h∆°n.",
         "examples": ["Dijkstra, Floyd‚ÄìWarshall", "Toposort"],
         "tag": "graphadv", "color": "orange"},
        {"stage": "C√¢y & c·∫•u tr√∫c nh·ªã ph√¢n",
         "desc": "Hi·ªÉu c·∫•u tr√∫c c√¢y, duy·ªát v√† ·ª©ng d·ª•ng.",
         "examples": ["Duy·ªát c√¢y nh·ªã ph√¢n", "Binary Search Tree"],
         "tag": "tree", "color": "green"},
        {"stage": "C√¢y n√¢ng cao",
         "desc": "·ª®ng d·ª•ng c√¢y n√¢ng cao ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n.",
         "examples": ["Segment Tree", "Fenwick Tree (BIT)"],
         "tag": "treeadv", "color": "lime"},
        {"stage": "L√Ω thuy·∫øt s·ªë",
         "desc": "C√°c b√†i to√°n to√°n h·ªçc trong l·∫≠p tr√¨nh.",
         "examples": ["∆Ø·ªõc, b·ªôi, modulo", "Thu·∫≠t to√°n Euclid"],
         "tag": "math", "color": "cyan"},
        {"stage": "Chu·ªói & x·ª≠ l√Ω k√Ω t·ª±",
         "desc": "Hi·ªÉu v√† √°p d·ª•ng c√°c thu·∫≠t to√°n chu·ªói.",
         "examples": ["KMP, Z-Function", "Hash String"],
         "tag": "string", "color": "fuchsia"},
        {"stage": "N√¢ng cao & thi ƒë·∫•u",
         "desc": "T·ªïng h·ª£p v√† √°p d·ª•ng trong c√°c k·ª≥ thi.",
         "examples": ["T·ªëi ∆∞u ƒë·ªô ph·ª©c t·∫°p", "Ph√¢n t√≠ch b√†i kh√≥"],
         "tag": "advanced", "color": "stone"},
    ]
    return render(request, "home.html", {"stages": stages})
