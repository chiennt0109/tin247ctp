# path: oj/views.py
from django.shortcuts import render
from django.http import JsonResponse
from judge.run_code import run_program
import os
# =============================
# DANH S√ÅCH GIAI ƒêO·∫†N LUY·ªÜN T·∫¨P
# =============================
STAGES = [
    {
        "id": 1,
        "title": "Giai ƒëo·∫°n 1: L√†m quen v·ªõi thu·∫≠t to√°n v√† c·∫•u tr√∫c c∆° b·∫£n",
        "summary": "Kh·ªüi ƒë·∫ßu h√†nh tr√¨nh v·ªõi bi·∫øn, v√≤ng l·∫∑p, v√† t∆∞ duy thu·∫≠t to√°n ƒë∆°n gi·∫£n. Giai ƒëo·∫°n n√†y gi√∫p b·∫°n l√†m quen v·ªõi c√°ch ph√¢n t√≠ch b√†i to√°n v√† vi·∫øt ch∆∞∆°ng tr√¨nh c∆° b·∫£n.",
        "topics": [
            {
                "title": "1.1. Bi·∫øn, ki·ªÉu d·ªØ li·ªáu v√† nh·∫≠p xu·∫•t",
                "summary": "Hi·ªÉu c√°ch khai b√°o bi·∫øn, nh·∫≠p v√† xu·∫•t d·ªØ li·ªáu trong C++ v√† Python.",
                "lang_support": ["C++", "Python"],
                "more_url": "/stages/1/topic/1",
                "sample_cpp": """#include <bits/stdc++.h>
using namespace std;
int main() {
    int a, b;
    cin >> a >> b;
    cout << a + b << endl;
    return 0;
}""",
                "sample_py": """a, b = map(int, input().split())
print(a + b)"""
            },
            {
                "title": "1.2. C·∫•u tr√∫c ƒëi·ªÅu ki·ªán (if / else)",
                "summary": "Ph√¢n nh√°nh quy·∫øt ƒë·ªãnh trong ch∆∞∆°ng tr√¨nh ‚Äì n·ªÅn t·∫£ng cho m·ªçi thu·∫≠t to√°n ph·ª©c t·∫°p.",
                "lang_support": ["C++", "Python"],
                "more_url": "/stages/1/topic/2",
                "sample_cpp": """#include <bits/stdc++.h>
using namespace std;
int main() {
    int n; cin >> n;
    if (n % 2 == 0) cout << "Even";
    else cout << "Odd";
}""",
                "sample_py": """n = int(input())
print("Even" if n % 2 == 0 else "Odd")"""
            },
            {
                "title": "1.3. V√≤ng l·∫∑p for / while",
                "summary": "T·ª± ƒë·ªông ho√° c√°c thao t√°c l·∫∑p, x·ª≠ l√Ω d√£y s·ªë, t√≠nh t·ªïng, ƒë·∫øm v√† nhi·ªÅu h∆°n n·ªØa.",
                "lang_support": ["C++", "Python"],
                "more_url": "/stages/1/topic/3",
                "sample_cpp": """#include <bits/stdc++.h>
using namespace std;
int main() {
    int n, sum = 0; cin >> n;
    for (int i = 1; i <= n; i++) sum += i;
    cout << sum;
}""",
                "sample_py": """n = int(input())
print(sum(range(1, n + 1)))"""
            },
            {
                "title": "1.4. B√†i t·∫≠p th·ª±c h√†nh: T·ªïng c√°c s·ªë ch·∫µn",
                "summary": "Luy·ªán t·∫≠p vi·∫øt v√≤ng l·∫∑p, t√≠nh t·ªïng c√≥ ƒëi·ªÅu ki·ªán, v√† xu·∫•t k·∫øt qu·∫£.",
                "lang_support": ["C++", "Python"],
                "more_url": "/stages/1/topic/4",
                "sample_cpp": """#include <bits/stdc++.h>
using namespace std;
int main() {
    int n, s = 0;
    cin >> n;
    for (int i = 1; i <= n; i++)
        if (i % 2 == 0) s += i;
    cout << s;
}""",
                "sample_py": """n = int(input())
print(sum(i for i in range(1, n + 1) if i % 2 == 0))"""
            },
        ],
    },
    # --- GIAI ƒêO·∫†N 2..14 (KHUNG S·∫¥N S√ÄNG M·ªû R·ªòNG) ---
    {
        "id": 2,
        "title": "Giai ƒëo·∫°n 2: M·∫£ng v√† chu·ªói k√Ω t·ª±",
        "summary": "L√†m quen v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu tuy·∫øn t√≠nh ƒë·∫ßu ti√™n ‚Äì m·∫£ng v√† chu·ªói. X·ª≠ l√Ω d·ªØ li·ªáu h√†ng lo·∫°t, ƒë·∫øm, t√¨m ki·∫øm, ƒë·∫£o ng∆∞·ª£c, n·ªëi chu·ªói, v.v.",
        "topics": [],
    },
    {"id": 3, "title": "Giai ƒëo·∫°n 3: H√†m v√† t∆∞ duy chia nh·ªè b√†i to√°n", "summary": "", "topics": []},
    {"id": 4, "title": "Giai ƒëo·∫°n 4: ƒê·ªá quy v√† nguy√™n l√Ω quay lui", "summary": "", "topics": []},
    {"id": 5, "title": "Giai ƒëo·∫°n 5: C·∫•u tr√∫c d·ªØ li·ªáu ngƒÉn x·∫øp & h√†ng ƒë·ª£i", "summary": "", "topics": []},
    {"id": 6, "title": "Giai ƒëo·∫°n 6: S·∫Øp x·∫øp v√† t√¨m ki·∫øm", "summary": "", "topics": []},
    {"id": 7, "title": "Giai ƒëo·∫°n 7: M·∫£ng hai chi·ªÅu v√† x·ª≠ l√Ω ma tr·∫≠n", "summary": "", "topics": []},
    {"id": 8, "title": "Giai ƒëo·∫°n 8: K·ªπ thu·∫≠t duy·ªát ƒë·ªì th·ªã (DFS/BFS)", "summary": "", "topics": []},
    {"id": 9, "title": "Giai ƒëo·∫°n 9: Quy ho·∫°ch ƒë·ªông (Dynamic Programming)", "summary": "", "topics": []},
    {"id": 10, "title": "Giai ƒëo·∫°n 10: Chia ƒë·ªÉ tr·ªã (Divide and Conquer)", "summary": "", "topics": []},
    {"id": 11, "title": "Giai ƒëo·∫°n 11: Tham lam (Greedy)", "summary": "", "topics": []},
    {"id": 12, "title": "Giai ƒëo·∫°n 12: C·∫•u tr√∫c d·ªØ li·ªáu n√¢ng cao (Set, Map, Heap...)", "summary": "", "topics": []},
    {"id": 13, "title": "Giai ƒëo·∫°n 13: ƒê·ªì th·ªã c√≥ tr·ªçng s·ªë, c√¢y khung, Dijkstra", "summary": "", "topics": []},
    {"id": 14, "title": "Giai ƒëo·∫°n 14: √în t·∫≠p t·ªïng h·ª£p & c√°c b√†i thi chuy√™n", "summary": "", "topics": []},
]
# ==========================================================
# üåà Trang ch·ªß ‚Äì L·ªô tr√¨nh h·ªçc l·∫≠p tr√¨nh (14 giai ƒëo·∫°n)
# ==========================================================
def home(request):
    stages = [
        (
            "üß© Giai ƒëo·∫°n 1: L√†m quen v·ªõi l·∫≠p tr√¨nh v√† t∆∞ duy m√°y t√≠nh",
            "Hi·ªÉu ch∆∞∆°ng tr√¨nh l√† g√¨, c√°ch m√°y t√≠nh x·ª≠ l√Ω l·ªánh, v√† vi·∫øt nh·ªØng l·ªánh ƒë·∫ßu ti√™n.",
            ["Bi·∫øn & ki·ªÉu d·ªØ li·ªáu", "C·∫•u tr√∫c ƒëi·ªÅu ki·ªán & v√≤ng l·∫∑p", "Nh·∫≠p xu·∫•t c∆° b·∫£n", "B√†i t·∫≠p t∆∞ duy logic c∆° b·∫£n"],
            "basic",
            "sky",
        ),
        (
            "‚öôÔ∏è Giai ƒëo·∫°n 2: C·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n & h√†m",
            "Bi·∫øt c√°ch l∆∞u tr·ªØ, truy c·∫≠p v√† x·ª≠ l√Ω d·ªØ li·ªáu c√≥ c·∫•u tr√∫c; chia nh·ªè ch∆∞∆°ng tr√¨nh th√†nh c√°c h√†m.",
            ["M·∫£ng 1D/2D", "Chu·ªói k√Ω t·ª±", "H√†m ‚Äì tham tr·ªã & tham chi·∫øu", "ƒê·ªçc & ghi file"],
            "data",
            "indigo",
        ),
        (
            "üìä Giai ƒëo·∫°n 3: Thu·∫≠t to√°n c∆° b·∫£n v√† ƒë·ªô ph·ª©c t·∫°p",
            "Hi·ªÉu b·∫£n ch·∫•t c·ªßa thu·∫≠t to√°n, c√°ch ph√¢n t√≠ch ƒë·ªô ph·ª©c t·∫°p v√† ch·ªçn gi·∫£i ph√°p t·ªëi ∆∞u h∆°n.",
            ["T√¨m ki·∫øm tuy·∫øn t√≠nh & nh·ªã ph√¢n", "S·∫Øp x·∫øp c∆° b·∫£n", "ƒê·ªô ph·ª©c t·∫°p O(n), O(n log n)", "ƒê√°nh gi√° hi·ªáu qu·∫£ ch∆∞∆°ng tr√¨nh"],
            "algorithm",
            "emerald",
        ),
        (
            "üß† Giai ƒëo·∫°n 4: T∆∞ duy gi·∫£i thu·∫≠t & b√†i to√°n th·ª±c t·∫ø",
            "√Åp d·ª•ng thu·∫≠t to√°n v√†o c√°c b√†i to√°n m√¥ ph·ªèng, th·ªëng k√™, v√† x·ª≠ l√Ω d·ªØ li·ªáu.",
            ["B√†i to√°n ƒë·∫øm & t√≠nh to√°n", "Th·ªëng k√™ & t√¨m ki·∫øm d·ªØ li·ªáu", "X·ª≠ l√Ω d√£y s·ªë", "B√†i to√°n m√¥ ph·ªèng logic"],
            "problem",
            "amber",
        ),
        (
            "üîÅ Giai ƒëo·∫°n 5: ƒê·ªá quy & chia ƒë·ªÉ tr·ªã",
            "Hi·ªÉu c√°ch chia nh·ªè b√†i to√°n v√† s·ª≠ d·ª•ng l·ªùi g·ªçi ƒë·ªá quy ƒë·ªÉ gi·∫£i quy·∫øt.",
            ["ƒê·ªá quy c∆° b·∫£n", "G·ªçi ƒë·ªá quy l·ªìng nhau", "Chia ƒë·ªÉ tr·ªã", "Merge Sort & Quick Sort"],
            "recursion",
            "pink",
        ),
        (
            "üìà Giai ƒëo·∫°n 6: Quy ho·∫°ch ƒë·ªông (Dynamic Programming)",
            "T·ªëi ∆∞u h√≥a b√†i to√°n b·∫±ng c√°ch ghi nh·ªõ tr·∫°ng th√°i v√† k·∫øt qu·∫£ trung gian.",
            ["Fibonacci t·ªëi ∆∞u", "Knapsack", "LIS, LCS", "DP 2D & Bitmask DP"],
            "dp",
            "purple",
        ),
        (
            "üéØ Giai ƒëo·∫°n 7: Quay lui & nh√°nh c·∫≠n (Backtracking)",
            "Duy·ªát to√†n b·ªô kh√¥ng gian nghi·ªám v√† c·∫Øt t·ªâa nh√°nh kh√¥ng c·∫ßn thi·∫øt ƒë·ªÉ t·ªëi ∆∞u th·ªùi gian.",
            ["Sinh t·ªï h·ª£p, ho√°n v·ªã", "N-Queens", "Sudoku", "B√†i to√°n t·ªï h·ª£p n√¢ng cao"],
            "backtrack",
            "rose",
        ),
        (
            "üß± Giai ƒëo·∫°n 8: C·∫•u tr√∫c d·ªØ li·ªáu n√¢ng cao",
            "S·ª≠ d·ª•ng c√°c c·∫•u tr√∫c d·ªØ li·ªáu m·∫°nh ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω v√† t·ªëi ∆∞u l∆∞u tr·ªØ.",
            ["Stack, Queue, Deque", "Linked List", "Set, Map, Heap", "Hash Table"],
            "datastruct",
            "teal",
        ),
        (
            "üåâ Giai ƒëo·∫°n 9: ƒê·ªì th·ªã c∆° b·∫£n",
            "L√†m quen kh√°i ni·ªám ƒë·ªânh, c·∫°nh, c√°ch duy·ªát ƒë·ªì th·ªã v√† t√¨m li√™n th√¥ng.",
            ["Bi·ªÉu di·ªÖn ƒë·ªì th·ªã", "DFS, BFS", "Connected Components", "Chu tr√¨nh & c√¢y khung"],
            "graph",
            "orange",
        ),
        (
            "üåç Giai ƒëo·∫°n 10: ƒê·ªì th·ªã n√¢ng cao",
            "H·ªçc c√°c thu·∫≠t to√°n t√¨m ƒë∆∞·ªùng, c√¢y bao tr√πm nh·ªè nh·∫•t v√† ƒë·ªì th·ªã c√≥ tr·ªçng s·ªë.",
            ["Dijkstra, Bellman-Ford", "Floyd‚ÄìWarshall", "Toposort, Tarjan", "MST: Kruskal & Prim"],
            "graphadv",
            "green",
        ),
        (
            "üå≤ Giai ƒëo·∫°n 11: C√¢y & c·∫•u tr√∫c ƒë·∫∑c bi·ªát",
            "Hi·ªÉu v√† s·ª≠ d·ª•ng c√°c lo·∫°i c√¢y ƒë·ªÉ truy v·∫•n & c·∫≠p nh·∫≠t d·ªØ li·ªáu nhanh ch√≥ng.",
            ["Binary Tree & BST", "AVL, Segment Tree", "Fenwick Tree", "Trie, Union-Find"],
            "tree",
            "lime",
        ),
        (
            "üìê Giai ƒëo·∫°n 12: L√Ω thuy·∫øt s·ªë v√† to√°n ·ª©ng d·ª•ng",
            "V·∫≠n d·ª•ng c√¥ng c·ª• to√°n h·ªçc trong l·∫≠p tr√¨nh ƒë·ªÉ gi·∫£i b√†i to√°n chia h·∫øt, modulo v√† t·ªï h·ª£p.",
            ["GCD, LCM, Euclid m·ªü r·ªông", "Modulo & ngh·ªãch ƒë·∫£o", "S√†ng Eratosthenes", "T·ªï h·ª£p & ph√¢n t√≠ch s·ªë"],
            "math",
            "cyan",
        ),
        (
            "üî§ Giai ƒëo·∫°n 13: Chu·ªói v√† x·ª≠ l√Ω vƒÉn b·∫£n",
            "Hi·ªÉu v√† √°p d·ª•ng thu·∫≠t to√°n chu·ªói trong x·ª≠ l√Ω k√Ω t·ª± v√† so kh·ªõp m·∫´u.",
            ["KMP, Z-algorithm", "Rolling Hash", "Palindrome, Substring", "Pattern Matching"],
            "string",
            "fuchsia",
        ),
        (
            "üöÄ Giai ƒëo·∫°n 14: Luy·ªán thi & k·ªπ nƒÉng thi ƒë·∫•u",
            "T·ªïng h·ª£p to√†n b·ªô ki·∫øn th·ª©c, r√®n t·ªëc ƒë·ªô v√† t∆∞ duy ph√¢n t√≠ch ƒë·ªÉ thi HSG ho·∫∑c chuy√™n Tin.",
            ["B√†i t·ªïng h·ª£p (DP + Graph + Math)", "Ph√¢n t√≠ch b√†i n√¢ng cao", "T·ªëi ∆∞u ƒë·ªô ph·ª©c t·∫°p", "K·ªπ thu·∫≠t debug & code s·∫°ch"],
            "advanced",
            "stone",
        ),
    ]
    return render(request, "home.html", {"stages": stages})
# üå± Trang chi ti·∫øt t·ª´ng giai ƒëo·∫°n (VD: Giai ƒëo·∫°n 1)
def roadmap_stage(request, stage_id):
    """Trang chi ti·∫øt 1 giai ƒëo·∫°n"""
    stage = next((s for s in STAGES if s["id"] == stage_id), None)
    if not stage:
        return render(request, "oj/not_found.html", {"message": "Kh√¥ng t√¨m th·∫•y giai ƒëo·∫°n n√†y."})

    # t√¨m prev / next
    idx = STAGES.index(stage)
    prev_stage = STAGES[idx - 1] if idx > 0 else None
    next_stage = STAGES[idx + 1] if idx < len(STAGES) - 1 else None

    context = {
        "stage": stage,
        "prev_stage": prev_stage,
        "next_stage": next_stage,
    }
    return render(request, "roadmap_stage.html", context)


def run_code_online(request):
    """Form ch·∫°y code tr·ª±c ti·∫øp trong trang"""
    if request.method == "POST":
        language = request.POST.get("language", "")
        code = request.POST.get("code", "")
        input_data = request.POST.get("input", "")
        try:
            output = run_program(language, code, input_data)
        except Exception as e:
            output = f"L·ªói khi ch·∫°y code: {str(e)}"
        return JsonResponse({"output": output})
    return JsonResponse({"error": "Invalid request"})
